{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","views/PhoneView/PhoneView.js","components/UserRegister/UserRegister.module.css","components/UserRegister/UserRegister.js","views/SignUpView/SignUpView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","getContacts","state","contacts","contactList","getFilter","contactFilter","getFilteredContacts","createSelector","lowerCasedFilter","toLowerCase","filter","name","includes","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","reset","className","s","contact__form","input__form","onSubmit","preventDefault","find","elem","alert","addContact","input__title","type","pattern","title","required","input__name","onChange","input__number","btn__add","Filter","filter__container","filter__title","filter__input","filterContacts","ContactList","useEffect","fetchContacts","map","id","contact__item","item","onClick__btn","onClick","removeContact","PhoneView","isLoggedIn","getIsLoggedIn","UserRegister","email","setEmail","password","setPassword","register","contact_form","autoComplete","SignUpView"],"mappings":"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","file":"static/js/sign-up-view.ff95ced4.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__3GOwI\",\"input__number\":\"ContactForm_input__number__2fdLH\",\"input__name\":\"ContactForm_input__name__xf-ez\",\"input__title\":\"ContactForm_input__title__3D2RU\",\"btn__add\":\"ContactForm_btn__add__3LLqA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__ZiqgY\",\"filter__input\":\"Filter_filter__input__29BBD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__3_Wjb\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.contactList;\n\nexport const getFilter = state => state.contacts.contactFilter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contactList, contactFilter) => {\n    const lowerCasedFilter = contactFilter.toLowerCase();\n    return contactList.filter(({ name }) =>\n      name.toLowerCase().includes(lowerCasedFilter),\n    );\n  },\n);\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        return setName(value);\n\n      case 'number':\n        return setNumber(value);\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const allReadyPresentContact = contacts.find(\n      elem => elem.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (allReadyPresentContact) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.contact__form}>\n      <form className={s.input__form} onSubmit={handleSubmit}>\n        <label>\n          <span className={s.input__title}>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            className={s.input__name}\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          <span className={s.input__title}>Number</span>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            className={s.input__number}\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.btn__add}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    dispatch(filterContacts(e.target.value)); // отправляем значение в redux\n  };\n\n  return (\n    <div className={s.filter__container}>\n      <label className={s.filter__title}>\n        Find contacts by name\n        <input\n          className={s.filter__input}\n          type=\"text\"\n          value={filter}\n          name=\"name\"\n          onChange={handleFilterChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import s from './ContactList.module.css';\nimport { fetchContacts, removeContact } from '../../redux/contacts/operations';\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nexport default function ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {contacts.map(({ name, number, id }) => (\n          <li key={id} className={s.contact__item}>\n            <p className={s.item}>{name}:</p>\n            <p className={s.item}>{number}</p>\n            <button\n              key={id}\n              type=\"button\"\n              className={s.onClick__btn}\n              onClick={() => dispatch(removeContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { getIsLoggedIn } from '../../redux/auth/auth-selectors';\n\nexport default function PhoneView() {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(getIsLoggedIn);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    isLoggedIn && (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    )\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"UserRegister_contact__form__3P6F_\",\"input__number\":\"UserRegister_input__number__2X_IK\",\"input__name\":\"UserRegister_input__name__3GwxH\",\"input__title\":\"UserRegister_input__title__1L6HE\",\"btn__add\":\"UserRegister_btn__add__2lddR\"};","import { useState } from 'react';\nimport { register } from '../../redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\n\nimport s from './UserRegister.module.css';\n\nexport default function UserRegister() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n\n      case 'email':\n        return setEmail(value);\n\n      case 'password':\n        return setPassword(value);\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(register({ name, email, password }));\n\n    // const allReadyPresentUser = contacts.find(\n    //   elem => elem.name.toLowerCase() === name.toLowerCase(),\n    // );\n\n    // if (allReadyPresentContact) {\n    //   alert(`${name} is already in contacts.`);\n    // } else {\n    //   dispatch(addContact({ name, number }));\n    // }\n\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div className={s.contact__form}>\n      <h1>SignUp please!</h1>\n      <form\n        onSubmit={handleSubmit}\n        className={s.contact_form}\n        autoComplete=\"off\"\n      >\n        <label>\n          <span className={s.input__title}>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            className={s.input__name}\n            required\n            value={name}\n            onChange={handleChange}\n          />\n          <span className={s.input__title}>Email</span>\n          <input\n            type=\"email\"\n            name=\"email\"\n            className={s.input__name}\n            required\n            value={email}\n            onChange={handleChange}\n          />\n          <span className={s.input__title}>Password</span>\n          <input\n            type=\"password\"\n            name=\"password\"\n            className={s.input__name}\n            required\n            value={password}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.btn__add}>\n          Signup\n        </button>\n      </form>\n    </div>\n  );\n}\n","import UserRegister from '../../components/UserRegister';\nimport { getIsLoggedIn } from '../../redux/auth/auth-selectors';\nimport { useSelector } from 'react-redux';\nimport PhoneView from '../PhoneView/PhoneView';\n\nexport default function SignUpView() {\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  return <div>{isLoggedIn ? <PhoneView /> : <UserRegister />}</div>;\n}\n"],"sourceRoot":""}